defmodule AshBaml.Helpers do
  @moduledoc """
  Helper macros for using BAML functions in Ash actions.
  """

  @doc """
  Calls a BAML function from an Ash action.

  This macro expands to an action implementation that delegates to the
  BAML function module generated by `BamlElixir.Client`.

  This macro is automatically available when using the `AshBaml.Resource` extension.

  ## Example

      actions do
        action :chat, MyApp.BamlClient.Reply do
          argument :message, :string
          run call_baml(:ChatAgent)
        end
      end

  ## How It Works

  1. Gets the `client_module` from the resource's `baml` configuration
  2. Constructs the function module: `ClientModule.FunctionName`
  3. Calls `FunctionModule.call(arguments)`
  4. Returns `{:ok, result}` or `{:error, reason}`

  ## Arguments

  - `function_name` - Atom matching a BAML function name

  ## Options

  None for Phase 1. Future phases will support:
  - `client: :atom` - Override client
  - `stream: boolean` - Enable streaming
  """
  defmacro call_baml(function_name) when is_atom(function_name) do
    quote do
      {AshBaml.Actions.CallBamlFunction, [function: unquote(function_name)]}
    end
  end

  @doc """
  Macro for calling BAML functions with streaming.

  Returns a Stream that emits chunks as they arrive from the LLM.

  ## Example

      action :chat_stream, AshBaml.Type.Stream do
        argument :message, :string
        run call_baml_stream(:ChatAgent)
      end
  """
  defmacro call_baml_stream(function_name) when is_atom(function_name) do
    quote do
      {AshBaml.Actions.CallBamlStream, [function: unquote(function_name)]}
    end
  end
end
