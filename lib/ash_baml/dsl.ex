defmodule AshBaml.Dsl do
  @moduledoc """
  DSL for configuring BAML integration in Ash resources.
  """

  @baml %Spark.Dsl.Section{
    name: :baml,
    describe: """
    Configure BAML client integration for this resource.

    ## Example

        baml do
          client_module MyApp.BamlClient
        end
    """,
    examples: [
      """
      baml do
        client_module MyApp.BamlClient
      end
      """
    ],
    schema: [
      client_module: [
        type: :atom,
        required: true,
        doc: """
        The module that uses `BamlElixir.Client` to define BAML functions.

        This module should have been generated by calling `use BamlElixir.Client`
        with a path to your BAML source files.

        Example:

            defmodule MyApp.BamlClient do
              use BamlElixir.Client, baml_src: "priv/baml_src"
            end
        """
      ],
      import_functions: [
        type: {:list, :atom},
        default: [],
        doc: """
        List of BAML function names to import as Ash actions.

        For each function listed, two actions are automatically generated:

        1. Regular action: `:function_name` - Returns the complete result
        2. Streaming action: `:function_name_stream` - Returns a Stream

        The function names must match BAML function definitions, and their
        return types must have corresponding generated types in
        `ClientModule.Types`.

        ## Example

            baml do
              client_module MyApp.BamlClient
              import_functions [:ExtractTasks, :SummarizeTasks]
            end

        This generates 4 actions:
        - `:extract_tasks` - Regular action
        - `:extract_tasks_stream` - Streaming action
        - `:summarize_tasks` - Regular action
        - `:summarize_tasks_stream` - Streaming action

        ## Requirements

        Before importing functions, you must:

        1. Define BAML functions in your `baml_src/` directory
        2. Run `mix ash_baml.gen.types YourClient` to generate types
        3. Ensure types exist in `YourClient.Types` namespace

        The transformer will validate at compile-time that:
        - Functions exist in the BAML client
        - Return types have been generated
        - Argument types are valid
        """
      ]
    ]
  }

  @doc false
  def baml, do: @baml
end
